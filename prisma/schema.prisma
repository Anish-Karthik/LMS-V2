generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Promo {
  id       String @id @default(auto()) @map("_id") @db.ObjectId()
  code     String @unique
  discount Float
  count    Int    @default(0)

  userObjId    String @db.ObjectId()
  user         User   @relation(fields: [userObjId], references: [id], onDelete: Cascade)
  type         String @default("promo")
  amountToUser Int    @default(0)

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id, code, userObjId])
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String    @unique
  phoneNo          String?   @unique
  email            String    @unique
  name             String
  image            String?
  howDidHear       String?
  employmentStatus String?
  dob              DateTime?
  country          String?
  city             String    @default("None")
  state            String    @default("None")
  gender           String    @default("prefer not to say")
  role             String    @default("user")
  isBanned         Boolean   @default(false)
  referralCount    Int       @default(0)
  referralBonus    Int       @default(0)
  isSuperAdmin     Boolean   @default(false)

  promos            Promo[]
  purchases         Purchase[]
  announcements     Announcement[]
  testimonials      Testimonial[]
  teacher           Teacher?
  admin             Admin?
  attendances       Attendance[] // Relation to track student attendance
  markedAttendances Attendance[]   @relation("AttendanceMarker") // Relation to track who marked attendance
  quizAttempts      QuizAttempt[] // Relation to track quiz attempts

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, phoneNo])
  @@index([userId, email])
}

model Purchase {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  userId   String
  price    Float   @default(0)
  referred Boolean @default(false)
  promo    Boolean @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  batchId String? @db.ObjectId
  Batch   Batch?  @relation(fields: [batchId], references: [id])

  userObjId String @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model Invite {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  invite    String    @unique
  userId    String
  role      String    @default("teacher")
  adminId   String    @db.ObjectId
  expiresAt DateTime?
  uses      Int       @default(0)
  admin     Admin     @relation(fields: [adminId], references: [id])
}

model Admin {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  userObjId String   @unique @db.ObjectId
  user      User     @relation(fields: [userObjId], references: [id], onDelete: Cascade)
  invites   Invite[]
}

model Teacher {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique
  userObjId String @unique @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id], onDelete: Cascade)

  courseIds String[] @db.ObjectId
  courses   Course[] @relation(fields: [courseIds], references: [id])

  batchesIds String[] @db.ObjectId
  batches    Batch[]  @relation(fields: [batchesIds], references: [id])

  // @@index([userId])
}

model Course {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  imageUrl      String?
  price         Float?
  type          String         @default("batch-based") // "batch-based" or "self-paced"
  isPublished   Boolean        @default(false)
  batches       Batch[]
  announcements Announcement[]
  Purchase      Purchase[]

  // New direct relationship with chapters for self-paced courses
  chapters Chapter[] @relation("CourseToChapter")

  teacherIds String[]  @db.ObjectId
  teachers   Teacher[] @relation(fields: [teacherIds], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Batch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  isClosed  Boolean  @default(false)
  isCurrent Boolean  @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  teacherIds    String[]       @db.ObjectId
  teachers      Teacher[]      @relation(fields: [teacherIds], references: [id])
  announcements Announcement[]
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  position    Int
  isPublished Boolean @default(false)

  topics       Topic[]
  userProgress UserProgress[]

  // Optional relationship with batch (for batch-based courses)
  batchId String? @db.ObjectId
  batch   Batch?  @relation(fields: [batchId], references: [id], onDelete: Cascade)

  // New optional relationship with course (for self-paced courses)
  courseId String? @db.ObjectId
  course   Course? @relation("CourseToChapter", fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([batchId])
  @@index([courseId])
}

model Topic {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  position    Int
  description String?
  videoUrl    String?
  type        String  @default("video") // "video", "quiz", "assignment", "live", "article"
  isPublished Boolean @default(false)
  isNotified  Boolean @default(false)
  isFree      Boolean @default(false)

  // Fields for live classes
  startTime DateTime? // When the live class starts
  duration  Int? // Duration in minutes
  liveLink  String? // URL for the live class

  // Fields for quiz
  questions       Json? // Array of questions, options, and answers
  timeLimit       Int? // Time limit in minutes for the quiz
  passingScore    Int? // Minimum score to pass the quiz (percentage)
  allowedAttempts Int? // Number of attempts allowed

  // Fields for article type
  content String? // Markdown content for article-type topics

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  attachmentIds     String?             @db.ObjectId
  attachments       Attachment[]
  userProgressTopic UserProgressTopic[]
  videoData         VideoData?
  attendances       Attendance[] // Relation to track attendance for this topic
  quizAttempts      QuizAttempt[] // Relation to track quiz attempts

  @@index([chapterId])
}

model Attendance {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  // Student being marked
  userId    String
  userObjId String @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id], onDelete: Cascade)

  // Topic for which attendance is being tracked
  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  // Person marking the attendance (teacher/admin)
  markedById String @db.ObjectId
  markedBy   User   @relation("AttendanceMarker", fields: [markedById], references: [id])

  // Attendance status
  status String @default("absent") // "present", "absent", "excused", "late"

  notes String? // Optional notes about attendance

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId]) // One attendance record per student per topic
  @@index([topicId])
  @@index([userId])
  @@index([markedById])
}

model VideoData {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  topicId String @unique @db.ObjectId

  @@index([id, topicId])
}

model Announcement {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  isPublished Boolean      @default(false)
  isNotified  Boolean      @default(false)
  type        String       @default("general")
  userObjId   String       @db.ObjectId
  user        User         @relation(fields: [userObjId], references: [id], onDelete: Cascade)
  attachments Attachment[]

  batchId String? @db.ObjectId
  batch   Batch?  @relation(fields: [batchId], references: [id])

  courseId String? @db.ObjectId
  course   Course? @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  topicId String? @db.ObjectId
  topic   Topic?  @relation(fields: [topicId], references: [id])

  batchId String? @db.ObjectId
  Batch   Batch?  @relation(fields: [batchId], references: [id])

  announcementId String?       @db.ObjectId
  announcement   Announcement? @relation(fields: [announcementId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, topicId])
  @@index([id, announcementId])
}

model UserProgress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isCompleted Boolean @default(false)

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model UserProgressTopic {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isCompleted Boolean @default(false)

  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId])
  @@index([topicId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model RazorpayCustomer {
  id                 String @id @default(auto()) @map("_id") @db.ObjectId
  userId             String @unique
  razorpayCustomerId String @unique
}

model RazorpayPurchase {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  paymentId String @unique
  orderId   String @unique
  signature String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testimonial {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  rating      Int      @default(5)
  description String
  isPublished Boolean  @default(false)
  userObjId   String   @db.ObjectId
  user        User     @relation(fields: [userObjId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New model for tracking quiz attempts
model QuizAttempt {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String
  userObjId String @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id], onDelete: Cascade)

  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  answers   Json // User's answers to the quiz
  score     Int // User's score (percentage)
  passed    Boolean // Whether the user passed the quiz
  timeTaken Int? // Time taken in seconds

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId, createdAt]) // Allow multiple attempts with different timestamps
  @@index([topicId])
  @@index([userId])
}
