generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Promo {
  id       String @id @default(auto()) @map("_id") @db.ObjectId()
  code     String @unique
  discount Float
  count    Int    @default(0)

  userObjId    String @db.ObjectId()
  user         User   @relation(fields: [userObjId], references: [id])
  type         String @default("promo")
  amountToUser Int    @default(0)

  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([id, code, userObjId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  userId        String    @unique
  phoneNo       String?   @unique
  email         String?   @unique
  name          String
  image         String?
  dob           DateTime?
  country       String?
  city          String?
  state         String?
  gender        String    @default("prefer not to say")
  role          String    @default("user")
  isBanned      Boolean   @default(false)
  referralCount Int       @default(0)
  referralBonus Int       @default(0)

  promos    Promo[]
  purchases Purchase[]
  teacher   Teacher?
  admin     Admin?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, phoneNo])
  @@index([userId, email])
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  // amountPaid Float

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  batchId String? @db.ObjectId
  Batch   Batch?  @relation(fields: [batchId], references: [id])

  userObjId String @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()

  @@unique([userId, courseId])
  @@index([courseId])
}

model Admin {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique
  userObjId String @unique @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id])
}

model Teacher {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique
  userObjId String @unique @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id])

  courseIds String[] @db.ObjectId
  courses   Course[] @relation(fields: [courseIds], references: [id])

  batchesIds String[] @db.ObjectId
  batches    Batch[]  @relation(fields: [batchesIds], references: [id])

  // @@index([userId])
}

model Course {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String?
  imageUrl      String?
  price         Float?
  // isPublished Boolean @default(false)
  batches       Batch[]
  announcements Announcement[]
  Purchase      Purchase[]

  teacherIds String[]  @db.ObjectId
  teachers   Teacher[] @relation(fields: [teacherIds], references: [id])

  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}

model Batch {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  isClosed  Boolean  @default(false)
  isCurrent Boolean  @default(false)

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]

  teacherIds    String[]       @db.ObjectId
  teachers      Teacher[]      @relation(fields: [teacherIds], references: [id])
  announcements Announcement[]
}

model Chapter {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  position    Int

  topics       Topic[]
  userProgress UserProgress[]

  batchId String @db.ObjectId
  batch   Batch  @relation(fields: [batchId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([batchId])
}

model Topic {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  position    Int
  description String?
  videoUrl    String?
  type        String  @default("video")
  isPublished Boolean @default(false)
  isNotified  Boolean @default(false)
  isFree      Boolean @default(false)

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  attachmentIds     String?             @db.ObjectId
  attachments       Attachment[]
  userProgressTopic UserProgressTopic[]
  videoData         VideoData?

  @@index([chapterId])
}

model VideoData {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  url     String
  topic   Topic  @relation(fields: [topicId], references: [id])
  topicId String @unique @db.ObjectId

  @@index([id, topicId])
}

model Announcement {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  isPublished Boolean @default(false)
  isNotified  Boolean @default(false)
  type        String  @default("general")

  attachments Attachment[]

  batchId String? @db.ObjectId
  batch   Batch?  @relation(fields: [batchId], references: [id])

  courseId String? @db.ObjectId
  course   Course? @relation(fields: [courseId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Attachment {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  url  String

  topicId String? @db.ObjectId
  topic   Topic?  @relation(fields: [topicId], references: [id])

  batchId String? @db.ObjectId
  Batch   Batch?  @relation(fields: [batchId], references: [id])

  announcementId String?       @db.ObjectId
  announcement   Announcement? @relation(fields: [announcementId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([id, topicId])
  @@index([id, announcementId])
}

model UserProgress {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isCompleted Boolean @default(false)

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model UserProgressTopic {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  isCompleted Boolean @default(false)

  topicId String @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, topicId])
  @@index([topicId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
