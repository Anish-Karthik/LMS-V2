generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  phoneNo   String?    @unique
  userId    String     @unique
  email     String?    @unique
  name      String
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  role      String     @default("user") // admin, user, teacher
  purchases Purchase[]
  teacher   Teacher?
  // @@index([userId])
}

model Teacher {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @unique
  userObjId String @unique @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id])

  courseIds String[] @db.ObjectId
  courses   Course[] @relation(fields: [courseIds], references: [id])

  batchesIds String[] @db.ObjectId
  batches    Batch[]  @relation(fields: [batchesIds], references: [id])

  // @@index([userId])
}

model Course {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  imageUrl    String?
  price       Float?
  // isPublished Boolean @default(false)
  batches     Batch[]
  updatedAt   DateTime   @updatedAt
  Purchase    Purchase[]
  teacherIds  String[]   @db.ObjectId
  teachers    Teacher[]  @relation(fields: [teacherIds], references: [id])
}

model Batch {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  name        String
  courseId    String       @db.ObjectId
  course      Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  attachments Attachment[]
  purchases   Purchase[]
  teacherIds  String[]     @db.ObjectId
  teachers    Teacher[]    @relation(fields: [teacherIds], references: [id])
}

model Chapter {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  position     Int
  userProgress UserProgress[]
  batchId      String         @db.ObjectId
  batch        Batch          @relation(fields: [batchId], references: [id], onDelete: Cascade)
  topics       Topic[]
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  @@index([batchId])
}

model Topic {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  type         String      @default("video")
  videoUrl     String?
  muxData      MuxData?
  chapterId    String      @db.ObjectId
  chapter      Chapter     @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  attachment   Attachment?
  attachmentId String?     @db.ObjectId
  isPublished  Boolean     @default(false)
  isFree       Boolean     @default(false)
  position     Int

  @@index([chapterId])
}

model Attachment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  url       String
  topic     Topic    @relation(fields: [topicId], references: [id])
  topicId   String   @unique @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Batch     Batch?   @relation(fields: [batchId], references: [id])
  batchId   String?  @db.ObjectId
}

model MuxData {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  assetId    String
  playbackId String?

  topicId String @unique @db.ObjectId
  topic   Topic  @relation(fields: [topicId], references: [id], onDelete: Cascade)
}

model UserProgress {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  chapterId String  @db.ObjectId
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, chapterId])
  @@index([chapterId])
}

model Purchase {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String

  courseId String @db.ObjectId
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
  Batch     Batch?   @relation(fields: [batchId], references: [id])
  batchId   String?  @db.ObjectId

  userObjId String @db.ObjectId
  user      User   @relation(fields: [userObjId], references: [id])

  @@unique([userId, courseId])
  @@index([courseId])
}

model StripeCustomer {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @unique
  stripeCustomerId String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
